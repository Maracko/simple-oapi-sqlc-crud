openapi: '3.0.0'
info:
  version: 1.0.0
  title: Simple TODO API
  description: A simple TODO CRUD API to test the goapi-gen and sqlc features inside Go
  contact:
    name: John Doe
    email: john@doe.com
    url: http://example.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: http://example.com/api
paths:
  /todos:
    get:
      description: |
        Returns all todos from the system that the user has access to
      operationId: getTodos
      parameters:
        - name: tags
          in: query
          description: tags to filter by
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: todo response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /todo:
    post:
      description: Creates a new todo in the store. Duplicates are allowed
      operationId: addTodo
      requestBody:
        description: Todo to add to the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTodo'
      responses:
        '200':
          description: todo response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /todo/{id}:
    get:
      description: Returns a todo based on a single ID
      operationId: find todo by id
      parameters:
        - name: id
          in: path
          description: ID of todo to fetch
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: todo response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: deletes a single pet todo on the ID supplied
      operationId: deleteTodo
      parameters:
        - name: id
          in: path
          description: ID of todo to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: todo deleted
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Todo:
      allOf:
        - $ref: '#/components/schemas/NewTodo'
        - type: object
          required:
            - id
          properties:
            id:
              type: integer
              format: int64

    NewTodo:
      type: object
      required:
        - content
      properties:
        title:
          type: string
        content:
          type: string
        tags:
          type: array
          items:
            type: string

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          x-go-extra-tags:
            json: code,omitempty
        message:
          type: string
