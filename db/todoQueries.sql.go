// Code generated by sqlc. DO NOT EDIT.
// source: todoQueries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
  title, tags, content
) VALUES (
  $1, $2, $3
)
RETURNING id, title, tags, content
`

type CreateTodoParams struct {
	Title   sql.NullString `db:"title"`
	Tags    []string       `db:"tags"`
	Content sql.NullString `db:"content"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (*Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.Title, pq.Array(arg.Tags), arg.Content)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		pq.Array(&i.Tags),
		&i.Content,
	)
	return &i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, title, tags, content FROM todos
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTodo(ctx context.Context, id int64) (*Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		pq.Array(&i.Tags),
		&i.Content,
	)
	return &i, err
}

const listTodos = `-- name: ListTodos :many
SELECT id, title, tags, content FROM todos
ORDER BY id DESC
`

func (q *Queries) ListTodos(ctx context.Context) ([]*Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			pq.Array(&i.Tags),
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodosWithTags = `-- name: ListTodosWithTags :many
SELECT id, title, tags, content FROM todos
WHERE tags && ($1::varchar[])
ORDER BY id DESC
`

func (q *Queries) ListTodosWithTags(ctx context.Context, dollar_1 []string) ([]*Todo, error) {
	rows, err := q.db.QueryContext(ctx, listTodosWithTags, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			pq.Array(&i.Tags),
			&i.Content,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
