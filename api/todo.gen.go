// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/discord-gophers/goapi-gen version v0.1.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/discord-gophers/goapi-gen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/render"
)

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code,omitempty"`
	Message string `json:"message"`
}

// NewTodo defines model for NewTodo.
type NewTodo struct {
	Content string   `json:"content"`
	Tags    []string `json:"tags,omitempty"`
	Title   *string  `json:"title,omitempty"`
}

// Todo defines model for Todo.
type Todo struct {
	// Embedded struct due to allOf(#/components/schemas/NewTodo)
	NewTodo `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ID int64 `json:"id"`
}

// AddTodoJSONBody defines parameters for AddTodo.
type AddTodoJSONBody NewTodo

// GetTodosParams defines parameters for GetTodos.
type GetTodosParams struct {
	// tags to filter by
	Tags []string `json:"tags,omitempty"`

	// maximum number of results to return
	Limit *int32 `json:"limit,omitempty"`
}

// AddTodoJSONRequestBody defines body for AddTodo for application/json ContentType.
type AddTodoJSONRequestBody AddTodoJSONBody

// Bind implements render.Binder.
func (AddTodoJSONRequestBody) Bind(*http.Request) error {
	return nil
}

// Response is a common response struct for all the API calls.
// A Response object may be instantiated via functions for specific operation responses.
type Response struct {
	body        interface{}
	statusCode  int
	contentType string
}

// Render implements the render.Renderer interface. It sets the Content-Type header
// and status code based on the response definition.
func (resp *Response) Render(w http.ResponseWriter, r *http.Request) error {
	w.Header().Set("Content-Type", resp.contentType)
	render.Status(r, resp.statusCode)
	return nil
}

// Status is a builder method to override the default status code for a response.
func (resp *Response) Status(statusCode int) *Response {
	resp.statusCode = statusCode
	return resp
}

// ContentType is a builder method to override the default content type for a response.
func (resp *Response) ContentType(contentType string) *Response {
	resp.contentType = contentType
	return resp
}

// MarshalJSON implements the json.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(resp.body)
}

// MarshalXML implements the xml.Marshaler interface.
// This is used to only marshal the body of the response.
func (resp *Response) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.Encode(resp.body)
}

// AddTodoJSON200Response is a constructor method for a AddTodo response.
// A *Response is returned with the configured status code and content type from the spec.
func AddTodoJSON200Response(body Todo) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// AddTodoJSONDefaultResponse is a constructor method for a AddTodo response.
// A *Response is returned with the configured status code and content type from the spec.
func AddTodoJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// DeleteTodoJSONDefaultResponse is a constructor method for a DeleteTodo response.
// A *Response is returned with the configured status code and content type from the spec.
func DeleteTodoJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// FindTodoByIDJSON200Response is a constructor method for a FindTodoByID response.
// A *Response is returned with the configured status code and content type from the spec.
func FindTodoByIDJSON200Response(body Todo) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// FindTodoByIDJSONDefaultResponse is a constructor method for a FindTodoByID response.
// A *Response is returned with the configured status code and content type from the spec.
func FindTodoByIDJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// GetTodosJSON200Response is a constructor method for a GetTodos response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTodosJSON200Response(body []Todo) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// GetTodosJSONDefaultResponse is a constructor method for a GetTodos response.
// A *Response is returned with the configured status code and content type from the spec.
func GetTodosJSONDefaultResponse(body Error) *Response {
	return &Response{
		body:        body,
		statusCode:  200,
		contentType: "application/json",
	}
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /todo)
	AddTodo(w http.ResponseWriter, r *http.Request)

	// (DELETE /todo/{id})
	DeleteTodo(w http.ResponseWriter, r *http.Request, id int64)

	// (GET /todo/{id})
	FindTodoByID(w http.ResponseWriter, r *http.Request, id int64)

	// (GET /todos)
	GetTodos(w http.ResponseWriter, r *http.Request, params GetTodosParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler          ServerInterface
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// AddTodo operation middleware
func (siw *ServerInterfaceWrapper) AddTodo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddTodo(w, r)
	})

	handler(w, r.WithContext(ctx))
}

// DeleteTodo operation middleware
func (siw *ServerInterfaceWrapper) DeleteTodo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id int64

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		err = fmt.Errorf("invalid format for parameter id: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTodo(w, r, id)
	})

	handler(w, r.WithContext(ctx))
}

// FindTodoByID operation middleware
func (siw *ServerInterfaceWrapper) FindTodoByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// ------------- Path parameter "id" -------------
	var id int64

	if err := runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id); err != nil {
		err = fmt.Errorf("invalid format for parameter id: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindTodoByID(w, r, id)
	})

	handler(w, r.WithContext(ctx))
}

// GetTodos operation middleware
func (siw *ServerInterfaceWrapper) GetTodos(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTodosParams

	// ------------- Optional query parameter "tags" -------------

	if err := runtime.BindQueryParameter("form", false, false, "tags", r.URL.Query(), &params.Tags); err != nil {
		err = fmt.Errorf("invalid format for parameter tags: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	if err := runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit); err != nil {
		err = fmt.Errorf("invalid format for parameter limit: %w", err)
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{err})
		return
	}

	var handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTodos(w, r, params)
	})

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	error
}
type UnmarshalingParamError struct {
	error
}
type RequiredParamError struct {
	error
}
type RequiredHeaderError struct {
	error
}
type InvalidParamFormatError struct {
	error
}
type TooManyValuesForParamError struct {
	error
}

type ServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      map[string]func(http.Handler) http.Handler
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

type ServerOption func(*ServerOptions)

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface, opts ...ServerOption) http.Handler {
	options := &ServerOptions{
		BaseURL:     "/",
		BaseRouter:  chi.NewRouter(),
		Middlewares: make(map[string]func(http.Handler) http.Handler),
		ErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
	}

	for _, f := range opts {
		f(options)
	}

	r := options.BaseRouter
	wrapper := ServerInterfaceWrapper{
		Handler:          si,
		Middlewares:      options.Middlewares,
		ErrorHandlerFunc: options.ErrorHandlerFunc,
	}

	r.Route(options.BaseURL, func(r chi.Router) {
		r.Post("/todo", wrapper.AddTodo)
		r.Delete("/todo/{id}", wrapper.DeleteTodo)
		r.Get("/todo/{id}", wrapper.FindTodoByID)
		r.Get("/todos", wrapper.GetTodos)

	})
	return r
}

func WithRouter(r chi.Router) ServerOption {
	return func(s *ServerOptions) {
		s.BaseRouter = r
	}
}

func WithServerBaseURL(url string) ServerOption {
	return func(s *ServerOptions) {
		s.BaseURL = url
	}
}

func WithMiddleware(key string, middleware func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares[key] = middleware
	}
}

func WithMiddlewares(middlewares map[string]func(http.Handler) http.Handler) ServerOption {
	return func(s *ServerOptions) {
		s.Middlewares = middlewares
	}
}

func WithErrorHandler(handler func(w http.ResponseWriter, r *http.Request, err error)) ServerOption {
	return func(s *ServerOptions) {
		s.ErrorHandlerFunc = handler
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+SWz27cNhDGX4WY9iivtk7Qg051vG6wRREHiXtKfaDFkUSDImlylN2FoXcvOFz538q1",
	"iwZtgZ5WSw05H+f7kZpbqF3vnUVLEapbiHWHveTHsxBcSA8+OI+BNPJw7RSm38aFXhJUoC29OYYCaOcx",
	"/8UWAxSwPWrdEW4pyCOSLU++js5CxWsUrteEvacdjGMBPcYoW155v1CkoG3LLwPeDDqggupLzn8ff3mX",
	"2F1dY00wFvABNxdOuTntltDSTJICJolJVJyPyAMyBLnj/5rMqwTnpHNKJ5nSmPMGqi+38H3ABir4rrz3",
	"pdybUk77GounG9PqqSU/vj205KkyrWZEXY4pTNvGTRWTNVcMe6kNVHDtOvuTcrioXQ8FWNmn6b+4zoqV",
	"S9YMIYV1RL4qS9zK3pscPBagMNZBe9LMwYmIOr0VF+erc3H66beVOPm4FuQEYSRBHYrWSa+PWrRCWiXi",
	"jalFg5KGgFFoG7VC8d5BAUbXaCPbsVd04mXdoTheLB9pilVZbjabheTXCxfacj83lr+uT88+fD47Ol4s",
	"Fx315oHL8PmB0pOPayjgK4aY9/HDYrlYpmDn0UqvoYI3PFSAl9SxRSVNSLrI9XxcitOAkjAKKSxuRIoV",
	"2nIFIrmAC7EavNF1jgkopDFugwo4Z5BplbVKu1aKGclOY6R3Tu2esC99Xko7W+YTOR389PQqAscDL9N4",
	"ck4qxQZOyuEhcxQGZAijd6niKd/xcvnN9D0njus5Zc0cNnIw9M0S58tyJvNgceuxJlQCp5ixyDSUt1qN",
	"GQWDhIdQ5PEERdS2NSg8UmbDZTbWKxGHJHqGhBVP3sPgZZA9EobIt8zjNOuVcE1el5zYi0l3AFTM7/0p",
	"1+rAzuJBhV6+gC4PzH97uG1WkmWof92sAlqcOa+fkIZgkzWs9kpGVMmVO6vWqwNHftaWD+e7Hb/8C540",
	"SHX3j1nyfz2PvP0/d9sY9iSKJrg+X3K7SJgeZf5gDRGD6GQUsq4xRkHud3tAwnukC074AgWpKWH/tSEM",
	"4moHBeDWG+7BGmki7pm4GTDs7qHgZuYhBq/vaiLt+HuXwOFO47GiXm51P/TCDv0VhsRowDgYYpmBywTz",
	"mozuNcFzbM61kH+fzbttvwzp00r856FNXmH4OoHzXNdVpn5kvBz/CAAA//8hGopg6gsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
